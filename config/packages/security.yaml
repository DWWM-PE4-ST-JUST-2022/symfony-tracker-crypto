security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    # List of roles that your app will know:
    # ROLE_USER, ROLE_ADMIN, ROLE_SUPER_ADMIN, ROLE_STATS
    # All roles you want to use must start by 'ROLE_'.
    # ROLE_USER is a special role, all logged user must have this role.
    # You can create all roles you want.
    #
    # In the example bellow, the ROLE_ADMIN extend the ROLE_USER. It means a user with ROLE_ADMIN will have all
    # access allowed by the ROLE_ADMIN + all access allowed by the ROLE_USER.

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN
        ROLE_STATS: ROLE_USER

    # A role can extend from multiple roles, from its parents,  grandparents and all ancestors too.
    # In the example bellow, the ROLE_FOO will have:
    # + all access allowed by the ROLE_FOO
    # + all access allowed by the ROLE_STATS
    # + all access allowed by the ROLE_SUPER_ADMIN
    # + all access allowed by the ROLE_ADMIN
    # + all access allowed by the ROLE_USER

#        ROLE_BAR: [ROLE_STATS, ROLE_USER]
#        ROLE_FOO:
#            - ROLE_STATS
#            - ROLE_SUPER_ADMIN

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            stateless: true
            provider: app_user_provider
            json_login:
                check_path: /authentication_token
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/docs, roles: PUBLIC_ACCESS } # Allows accessing the Swagger UI
        - { path: ^/authentication_token, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
